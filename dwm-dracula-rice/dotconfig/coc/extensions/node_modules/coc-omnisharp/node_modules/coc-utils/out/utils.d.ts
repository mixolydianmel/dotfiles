/// <reference types="node" />
import { IncomingMessage, Agent } from 'http';
import { http, https } from "follow-redirects";
import { UrlWithStringQuery } from "url";
export declare type FstArg<T> = T extends (arg1: infer U, ...args: any[]) => any ? U : any;
export declare type SndArg<T> = T extends (arg1: any, arg2: infer U, ...args: any[]) => any ? U : any;
export declare type HttpsOpts = FstArg<typeof https.request>;
export declare type HttpOpts = FstArg<typeof http.request>;
export declare function fileURLToPath(x: string): string;
export declare function sleep(ms: number): Promise<unknown>;
export declare function ensurePathExists(targetPath: string): void;
export declare function getPipePath(pipeName: string): string;
export declare function checkIfFileExists(filePath: string): boolean;
export declare function getTimestampString(): string;
export declare function isWindowsOS(): boolean;
export declare function getCurrentSelection(mode: string): Promise<string[]>;
export declare function getAgent(endpoint: UrlWithStringQuery): Agent;
export declare function httpsGet<T>(url: string, cb: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void, res: IncomingMessage) => void): Promise<T>;
export declare function httpsGetJson<T>(url: string): Promise<T>;
