"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const coc = require("coc.nvim");
const coc_nvim_1 = require("coc.nvim");
const utils_1 = require("./utils");
class REPLProcess {
    constructor(title, progPath, progArgs) {
        this.title = title;
        this.progPath = progPath;
        this.progArgs = progArgs;
        this.onExitedEmitter = new coc.Emitter();
        this.consoleTerminal = undefined;
        this.log = coc.workspace.createOutputChannel(title);
        this.onExited = this.onExitedEmitter.event;
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.consoleTerminal) {
                this.log.appendLine(`${this.title} already started.`);
                this.consoleTerminal.show(true);
                return;
            }
            this.log.appendLine(`${this.title} starting.`);
            this.consoleTerminal = yield coc.workspace.createTerminal({
                name: this.title,
                shellPath: this.progPath,
                shellArgs: this.progArgs
            });
            this.consoleCloseSubscription =
                coc.workspace.onDidCloseTerminal((terminal) => {
                    if (terminal === this.consoleTerminal) {
                        this.log.appendLine(`${this.title} terminated or terminal UI was closed`);
                        this.onExitedEmitter.fire();
                    }
                }, this);
        });
    }
    showConsole(preserveFocus) {
        if (this.consoleTerminal) {
            this.consoleTerminal.show(preserveFocus);
        }
    }
    eval(line) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.consoleTerminal) {
                this.consoleTerminal.sendText(line);
            }
        });
    }
    scrollToBottom() {
        return __awaiter(this, void 0, void 0, function* () {
            this.consoleTerminal.show(false);
            yield utils_1.sleep(200);
            yield coc.workspace.nvim.command("wincmd w");
        });
    }
    dispose() {
        if (this.consoleCloseSubscription) {
            this.consoleCloseSubscription.dispose();
            this.consoleCloseSubscription = undefined;
        }
        if (this.consoleTerminal) {
            this.log.appendLine(`Terminating ${this.title} process...`);
            this.consoleTerminal.dispose();
            this.consoleTerminal = undefined;
        }
    }
}
exports.REPLProcess = REPLProcess;
class REPLProvider {
    constructor(desc) {
        this.desc = desc;
        this.m_proc = undefined;
    }
    createREPL() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.m_proc) {
                this.m_proc.dispose();
                this.m_proc = undefined;
            }
            this.m_proc = new REPLProcess(this.desc.title, this.desc.command, this.desc.args);
            this.m_proc.onExited(() => {
                this.m_proc = undefined;
            });
            yield this.m_proc.start();
            return this.m_proc.onExited;
        });
    }
    eval(mode) {
        return __awaiter(this, void 0, void 0, function* () {
            let document = yield coc_nvim_1.workspace.document;
            if (!document || document.filetype !== this.desc.filetype) {
                return;
            }
            if (!this.m_proc) {
                yield this.createREPL();
            }
            // TODO: move to workspace.getCurrentSelection when we get an answer:
            // https://github.com/neoclide/coc.nvim/issues/933
            const content = yield utils_1.getCurrentSelection(mode);
            for (let line of content) {
                yield this.m_proc.eval(line);
            }
            yield this.m_proc.eval(this.desc.commit);
            // see :help feedkeys
            yield coc_nvim_1.workspace.nvim.call('eval', `feedkeys("\\<esc>${content.length}j", "in")`);
            // await currentREPL.scrollToBottom()
        });
    }
}
exports.REPLProvider = REPLProvider;
//# sourceMappingURL=repl.js.map