"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const utils_1 = require("./utils");
const fs = require("fs");
const path = require("path");
const platform_1 = require("./platform");
const extract_zip_1 = __importDefault(require("extract-zip"));
const rimraf_1 = __importDefault(require("rimraf"));
class LanguageServerProvider {
    constructor(extension, name, packs, repo) {
        this.repo = repo;
        const platsig = platform_1.getPlatformSignature();
        this.languageServerName = name;
        this.extensionStoragePath = extension.storagePath;
        this.languageServerPackage = packs[platsig];
        if (!this.languageServerPackage) {
            throw "Platform not supported";
        }
        this.languageServerDirectory = path.join(this.extensionStoragePath, "server");
        this.languageServerZip = this.languageServerDirectory + ".zip";
        this.languageServerExe = path.join(this.languageServerDirectory, this.languageServerPackage.executable);
    }
    fetchDownloadInfo(platfile) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.repo.kind === "github") {
                let { repo: repo, channel: channel } = this.repo;
                let api_url = `https://api.github.com/repos/${repo}/releases/${channel}`;
                let api_result = yield utils_1.httpsGetJson(api_url);
                let matched_assets = api_result.assets.filter(x => x.name === platfile);
                return {
                    url: matched_assets[0].browser_download_url,
                    version: api_result.name,
                    id: api_result.id,
                    downloadedTime: Date.now()
                };
            }
            else if (this.repo.kind === "url-prefix") {
                return {
                    url: `${this.repo.url}/${platfile}`,
                    version: '',
                    id: 0,
                    downloadedTime: Date.now()
                };
            }
            throw new Error("unsupported repo kind.");
        });
    }
    loadLocalDownloadInfo() {
        let fname = path.join(this.extensionStoragePath, "downloadinfo.json");
        if (!utils_1.checkIfFileExists(fname)) {
            return null;
        }
        return JSON.parse(fs.readFileSync(fname, 'utf-8'));
    }
    saveLocalDownloadInfo(inf) {
        let content = JSON.stringify(inf);
        let fname = path.join(this.extensionStoragePath, "downloadinfo.json");
        fs.writeFileSync(fname, content, 'utf-8');
    }
    downloadLanguageServer() {
        return __awaiter(this, void 0, void 0, function* () {
            let item = coc_nvim_1.workspace.createStatusBarItem(0, { progress: true });
            try {
                if (!fs.existsSync(this.extensionStoragePath)) {
                    fs.mkdirSync(this.extensionStoragePath);
                }
                item.text = `Looking for ${this.languageServerName} updates`;
                item.show();
                let platfile = this.languageServerPackage.platformPath;
                let downinfo = yield this.fetchDownloadInfo(platfile);
                let localinfo = this.loadLocalDownloadInfo();
                if (localinfo && localinfo.id === downinfo.id && localinfo.version === downinfo.version) {
                    // update localinfo timestamp and return
                    localinfo.downloadedTime = Date.now();
                    this.saveLocalDownloadInfo(localinfo);
                    return;
                }
                if (fs.existsSync(this.languageServerDirectory)) {
                    rimraf_1.default.sync(this.languageServerDirectory);
                }
                fs.mkdirSync(this.languageServerDirectory);
                item.text = `Downloading ${this.languageServerName}`;
                item.show();
                coc_nvim_1.workspace.showMessage(`Downloading ${this.languageServerName}`, 'more');
                yield utils_1.httpsGet(downinfo.url, (resolve, _, res) => {
                    let file = fs.createWriteStream(this.languageServerZip);
                    let stream = res.pipe(file);
                    stream.on('finish', resolve);
                });
                item.text = `Extracting ${this.languageServerName}`;
                item.show();
                coc_nvim_1.workspace.showMessage(`Extracting ${this.languageServerName}`, 'more');
                yield new Promise((resolve, reject) => {
                    extract_zip_1.default(this.languageServerZip, { dir: this.languageServerDirectory }, (err) => {
                        if (err)
                            reject(err);
                        else
                            resolve();
                    });
                });
                fs.unlinkSync(this.languageServerZip);
                // update timestamp
                downinfo.downloadedTime = Date.now();
                this.saveLocalDownloadInfo(downinfo);
            }
            finally {
                item.dispose();
            }
        });
    }
    // returns the full path to the language server executable
    getLanguageServer() {
        return __awaiter(this, void 0, void 0, function* () {
            const plat = platform_1.getPlatformDetails();
            if (!fs.existsSync(this.languageServerExe) || this.shouldRegularUpdate()) {
                yield this.downloadLanguageServer();
            }
            // Make sure the server is executable
            if (plat.operatingSystem !== platform_1.OperatingSystem.Windows) {
                fs.chmodSync(this.languageServerExe, "755");
            }
            return this.languageServerExe;
        });
    }
    getLanguageServerVersion() {
        return this.loadLocalDownloadInfo().version;
    }
    shouldRegularUpdate() {
        let thres = 7 * 86400000;
        let info = this.loadLocalDownloadInfo();
        if (!info)
            return true;
        let diff = new Date(Date.now() - info.downloadedTime);
        return diff.getTime() >= thres;
    }
}
exports.LanguageServerProvider = LanguageServerProvider;
//# sourceMappingURL=langserver.js.map